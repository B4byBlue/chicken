BITS 32

global _start

section .text

_start:
    xor eax, eax              ; Tránh Null Bytes
    mov eax, [fs:eax + 0x30]  ; EAX = PEB
    mov eax, [eax + 0xc]      ; EAX = PEB->Ldr
    mov esi, [eax + 0x14]     ; ESI = PEB->Ldr.InMemoryOrderModuleList
    lodsd                     ; EAX = Module thứ 2 (ntdll.dll)
    xchg eax, esi             ; Chuyển sang phần tử kế tiếp
    lodsd                     ; EAX = Module thứ 3 (kernel32)
    mov eax, [eax + 0x10]     ; EAX = Base address của kernel32

    mov ebx, [eax + 0x3c]     ; RVA của PE signature
    add ebx, eax              ; VA của PE signature
    mov ebx, [ebx + 0x78]     ; RVA của exported directory
    add ebx, eax              ; VA của exported directory
    mov esi, [ebx + 0x20]     ; RVA của bảng tên hàm exported
    add esi, eax              ; VA của bảng tên hàm exported
    mov edx, eax              ; Lưu base address vào edx
    push esi                  ; Lưu VA của bảng tên hàm

    ; Tìm LoadLibraryA - hash: 0x00059ba3
    push 0x00059ba3
    xor ecx, ecx              ; Chuẩn bị counter
    call _find_addr
    call _get_addr
    push edi                  ; Lưu địa chỉ LoadLibraryA

    ; Khôi phục VA của bảng tên hàm
    mov esi, [esp + 8]

    ; Tìm GetProcAddress - hash: 0x0015bdfd
    push 0x0015bdfd
    xor ecx, ecx              ; Chuẩn bị counter
    call _find_addr
    call _get_addr
    push edi                  ; Lưu địa chỉ GetProcAddress
    jmp _load_user32

_get_addr:
    mov esi, [ebx + 0x24]           ; RVA của bảng ordinal
    add esi, edx                    ; VA của bảng ordinal
    mov cx, WORD [esi + ecx * 2]    ; Lấy biased_ordinal
    dec ecx                         ; Lấy ordinal
    mov esi, [ebx + 0x1c]           ; RVA của AddressOfFunctions
    add esi, edx                    ; VA của Export Table
    mov edi, [esi + ecx * 4]        ; RVA của hàm
    add edi, edx                    ; VA của hàm
    ret

_find_addr:
    inc ecx                         ; Tăng name index counter
    lodsd                           ; Load name rva vào eax
    add eax, edx                    ; Thêm base address để lấy VA
    call _calculate_hash            ; Tính hash
    cmp edi, [esp + 4]              ; So sánh hash
    jnz _find_addr                  ; Lặp nếu không khớp
    ret                             ; Return với ecx chứa index

_calculate_hash:
    push ecx
    push edx
    xor ecx, ecx
    mov edi, ecx
    mov edx, edi

    _loop:
        shl edi, 1
        mov dl, BYTE [eax + ecx]
        add edi, edx
        inc ecx
        cmp BYTE[eax + ecx], 0
        jne _loop

    pop edx
    pop ecx
    ret

_load_user32:
    ; Load user32.dll
    mov edi, [esp + 8]              ; Lấy LoadLibraryA
    push "ll"
    push "32.d"
    push "user"
    push esp
    call edi                        ; LoadLibraryA("user32.dll")

    ; Tìm MessageBoxA
    push "oxA"
    push "ageB"
    push "Mess"
    push esp
    push eax                        ; Handle của user32.dll
    mov edi, [esp + 32]             ; Lấy GetProcAddress
    call edi                        ; GetProcAddress(user32, "MessageBoxA")

    ; Chuẩn bị chuỗi cho MessageBox
    ; Title: "Module 2\0"
    push 0                          ; NULL terminator
    push "le 2"                     ; 'l','e',' ','2'
    push "Modu"                     ; 'M','o','d','u'
    mov esi, esp                    ; ESI -> "Module 2"

    ; Message: "Hello!\0"
    push 0                          ; NULL terminator
    push "llo!"                     ; 'l','l','o','!'
    push "He"                       ; 'H','e',0,0
    mov edi, esp                    ; EDI -> "Hello!"

    ; Gọi MessageBoxA(NULL, "Hello!", "Module 2", MB_OK)
    xor ebx, ebx
    push ebx                        ; uType = MB_OK
    push esi                        ; lpCaption = "Module 2"
    push edi                        ; lpText = "Hello!"
    push ebx                        ; hWnd = NULL
    call eax                        ; MessageBoxA

    ; Bây giờ mở calc.exe sử dụng WinExec
    ; Tạo stack frame
    mov ebp, esp
    sub esp, 0x20

    ; Lấy lại kernel32 base address
    xor ebx, ebx
    mov ebx, [fs:ebx+0x30]          ; PEB
    mov ebx, [ebx+0xC]              ; LDR
    mov ebx, [ebx+0x1C]             ; 1st entry (ntdll)
    mov ebx, [ebx]                  ; 2nd entry (kernelbase)
    mov ebx, [ebx]                  ; 3rd entry (kernel32)
    mov eax, [ebx+0x8]              ; Base address của kernel32
    mov [ebp-0x4], eax

    ; Tìm Export Table
    mov ebx, [eax+0x3C]             ; Offset NewEXEHeader
    add ebx, eax
    mov ebx, [ebx+0x78]             ; RVA ExportTable
    add ebx, eax

    ; Lưu các bảng
    mov edi, [ebx+0x20]             ; RVA NamePointerTable
    add edi, eax
    mov [ebp-0x8], edi

    mov ecx, [ebx+0x24]             ; RVA OrdinalTable
    add ecx, eax
    mov [ebp-0xC], ecx

    mov edx, [ebx+0x1C]             ; RVA AddressTable
    add edx, eax
    mov [ebp-0x10], edx

    mov edx, [ebx+0x14]             ; Number of Functions
    mov [ebp-0x14], edx

    jmp short _find_winexec

_findFunctionAddr:
    xor eax, eax
    mov edx, [ebp-0x14]

_searchLoop:
    mov edi, [ebp-0x8]
    mov esi, [ebp+0x18]
    xor ecx, ecx
    cld
    mov edi, [edi+eax*4]
    add edi, [ebp-0x4]
    add cx, 0x8
    repe cmpsb
    jz _found
    inc eax
    cmp eax, edx
    jb _searchLoop

_found:
    mov ecx, [ebp-0xC]
    mov edx, [ebp-0x10]
    mov ax, [ecx + eax*2]
    mov eax, [edx + eax*4]
    add eax, [ebp-0x4]
    ret

_find_winexec:
    ; Tạo chuỗi 'WinExec\x00'
    mov edx, 0x63657878             ; "cexx"
    shr edx, 8
    push edx
    push 0x456E6957                 ; "EniW"
    mov [ebp+0x18], esp
    call _findFunctionAddr

    ; Gọi WinExec("calc.exe", SW_SHOWNORMAL)
    xor ecx, ecx
    push ecx                        ; NULL terminator
    push 0x6578652e                 ; "exe."
    push 0x636c6163                 ; "clac"
    mov ebx, esp
    inc ecx
    push ecx                        ; SW_SHOWNORMAL = 1
    push ebx                        ; "calc.exe"
    call eax

    ; Tìm ExitProcess
    xor ecx, ecx
    mov ecx, 0x73736501
    shr ecx, 8
    push ecx
    push 0x636F7250                 ; "corP"
    push 0x74697845                 ; "tixE"
    mov [ebp+0x18], esp
    call _findFunctionAddr

    ; Gọi ExitProcess(0)
    xor edx, edx
    push edx
    call eax

; Biên dịch:
; nasm -f win32 combined.asm -o combined.o
; ld -m i386pe combined.o -o combined.exe
; hoặc extract shellcode:
; for i in $(objdump -D combined.o | grep "^ " | cut -f2); do echo -n '\x'$i; done; echo