#define _CRT_SECURE_NO_WARNINGS
#include <windows.h>
#include <winternl.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#include <conio.h>  // _kbhit, _getch

enum LogEvent { INFO, WARNING, LOG_ERROR };

void logMessage(enum LogEvent level, const char* callingFunction, const char* format, ...)
{
    const char* levelPrefix;
    switch (level) {
    case INFO:    levelPrefix = "[i]"; break;
    case WARNING: levelPrefix = "[!]"; break;
    case LOG_ERROR:levelPrefix = "[x]"; break;
    default:      levelPrefix = "[?]"; break;
    }

    printf("%s | %s | ", levelPrefix, callingFunction);

    va_list args;
    va_start(args, format);
    vprintf(format, args);
    va_end(args);

    printf("\n");
}

typedef struct {
    LPVOID exec_mem;
    SIZE_T size;
    HANDLE hThread;
} shell_ctx;

// start shellcode asynchronously, return shell_ctx (exec_mem and thread handle)
int start_shellcode_async(const unsigned char* buf, SIZE_T size, shell_ctx* out)
{
    if (!buf || size == 0 || !out) return -1;
    ZeroMemory(out, sizeof(*out));
    out->size = size;

    // Allocate RWX memory to avoid VirtualProtect fallback issues
    out->exec_mem = VirtualAlloc(NULL, size, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
    if (!out->exec_mem) {
        logMessage(LOG_ERROR, __FUNCTION__, "VirtualAlloc failed: %lu", GetLastError());
        return -1;
    }

    memcpy(out->exec_mem, buf, size);

    // Create a thread that starts at exec_mem
    out->hThread = CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)out->exec_mem, NULL, 0, NULL);
    if (!out->hThread) {
        logMessage(LOG_ERROR, __FUNCTION__, "CreateThread failed: %lu", GetLastError());
        VirtualFree(out->exec_mem, 0, MEM_RELEASE);
        out->exec_mem = NULL;
        return -1;
    }

    logMessage(INFO, __FUNCTION__, "Started shellcode thread %p (mem=%p size=%llu)", out->hThread, out->exec_mem, (unsigned long long)size);
    return 0;
}

// stop (force) and free a running shell context
void stop_and_free_shell(shell_ctx* ctx)
{
    if (!ctx || (ctx->exec_mem == NULL && ctx->hThread == NULL)) return;

    if (ctx->hThread) {
        DWORD s = WaitForSingleObject(ctx->hThread, 0);
        if (s != WAIT_OBJECT_0) {
            // thread still running -> terminate it
            logMessage(WARNING, __FUNCTION__, "Thread still running, terminating...");
            TerminateThread(ctx->hThread, 0);
        }
        else {
            logMessage(INFO, __FUNCTION__, "Thread already exited.");
        }
        CloseHandle(ctx->hThread);
        ctx->hThread = NULL;
    }

    if (ctx->exec_mem) {
        VirtualFree(ctx->exec_mem, 0, MEM_RELEASE);
        ctx->exec_mem = NULL;
    }
    ctx->size = 0;
}

// helper: read file into buffer (caller must free)
unsigned char* read_file_to_buf(const char* fname, size_t* out_size)
{
    if (!fname || !out_size) return NULL;
    FILE* f = fopen(fname, "rb");
    if (!f) return NULL;
    if (fseek(f, 0, SEEK_END) != 0) { fclose(f); return NULL; }
    long fsize = ftell(f);
    if (fsize < 0) { fclose(f); return NULL; }
    rewind(f);

    unsigned char* buf = (unsigned char*)malloc((size_t)fsize);
    if (!buf) { fclose(f); return NULL; }
    size_t n = fread(buf, 1, (size_t)fsize, f);
    fclose(f);
    if (n != (size_t)fsize) { free(buf); return NULL; }
    *out_size = n;
    return buf;
}

int main(int argc, char* argv[])
{
    if (argc < 3) {
        printf("Usage: %s <shell1.bin> <shell2.bin>\n", argv[0]);
        return 1;
    }

    const char* s1 = argv[1];
    const char* s2 = argv[2];

    // load shell1
    size_t s1_size = 0;
    unsigned char* s1_buf = read_file_to_buf(s1, &s1_size);
    if (!s1_buf) {
        logMessage(LOG_ERROR, __FUNCTION__, "Cannot read shell1 '%s'", s1);
        return 2;
    }
    logMessage(INFO, __FUNCTION__, "Read shell1 '%s' (%zu bytes).", s1, s1_size);

    shell_ctx ctx1;
    if (start_shellcode_async(s1_buf, s1_size, &ctx1) != 0) {
        logMessage(LOG_ERROR, __FUNCTION__, "Failed to start shell1");
        free(s1_buf);
        return 3;
    }

    // Monitor: wait for shell1 to exit OR user to press ENTER to stop it
    logMessage(INFO, __FUNCTION__, "Shell1 running. Press ENTER to stop shell1 and start shell2, or wait for shell1 to exit naturally.");
    while (1) {
        DWORD w = WaitForSingleObject(ctx1.hThread, 100); // 100 ms
        if (w == WAIT_OBJECT_0) {
            logMessage(INFO, __FUNCTION__, "shell1 thread exited naturally.");
            // thread handle still needs to be closed and memory freed
            CloseHandle(ctx1.hThread);
            ctx1.hThread = NULL;
            if (ctx1.exec_mem) {
                VirtualFree(ctx1.exec_mem, 0, MEM_RELEASE);
                ctx1.exec_mem = NULL;
            }
            break;
        }
        // check console input
        if (_kbhit()) {
            int c = _getch();
            if (c == 13) { // Enter pressed
                logMessage(INFO, __FUNCTION__, "User pressed ENTER -> stopping shell1.");
                stop_and_free_shell(&ctx1);
                break;
            }
            else {
                // ignore other keypresses; optionally show hint
            }
        }
        // continue loop
    }

    free(s1_buf); s1_buf = NULL;

    // Now load and run shell2
    size_t s2_size = 0;
    unsigned char* s2_buf = read_file_to_buf(s2, &s2_size);
    if (!s2_buf) {
        logMessage(LOG_ERROR, __FUNCTION__, "Cannot read shell2 '%s'", s2);
        return 4;
    }
    logMessage(INFO, __FUNCTION__, "Read shell2 '%s' (%zu bytes).", s2, s2_size);

    shell_ctx ctx2;
    if (start_shellcode_async(s2_buf, s2_size, &ctx2) != 0) {
        logMessage(LOG_ERROR, __FUNCTION__, "Failed to start shell2");
        free(s2_buf);
        return 5;
    }

    logMessage(INFO, __FUNCTION__, "Shell2 running. Waiting for it to finish...");
    WaitForSingleObject(ctx2.hThread, INFINITE);
    logMessage(INFO, __FUNCTION__, "shell2 thread finished. Cleaning up...");
    stop_and_free_shell(&ctx2);

    free(s2_buf);

    logMessage(INFO, __FUNCTION__, "All done.");
    return 0;
}
